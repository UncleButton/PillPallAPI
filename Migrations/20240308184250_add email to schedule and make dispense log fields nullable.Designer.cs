// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PillPallAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240308184250_add email to schedule and make dispense log fields nullable")]
    partial class addemailtoscheduleandmakedispenselogfieldsnullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("ContainerMedMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContainerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ContainerMedMaps");
                });

            modelBuilder.Entity("DispenseLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MedId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumPills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DispenseLogs");
                });

            modelBuilder.Entity("Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxDosesPerDay")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxPillsPerDose")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumPills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PIN")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PharmacyAddr1")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmacyAddr2")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmacyCity")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PharmacyPhone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PharmacyState")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmacyZip")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrescriberName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Schedule", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PIN")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ScheduleMed", b =>
                {
                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumPills")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScheduleId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("ScheduleMeds");
                });

            modelBuilder.Entity("Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PIN")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScheduleMed", b =>
                {
                    b.HasOne("Medication", "Medication")
                        .WithMany("ScheduleMeds")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schedule", "Schedule")
                        .WithMany("ScheduleMeds")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Time", b =>
                {
                    b.HasOne("Schedule", "Schedule")
                        .WithMany("Times")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Medication", b =>
                {
                    b.Navigation("ScheduleMeds");
                });

            modelBuilder.Entity("Schedule", b =>
                {
                    b.Navigation("ScheduleMeds");

                    b.Navigation("Times");
                });
#pragma warning restore 612, 618
        }
    }
}
